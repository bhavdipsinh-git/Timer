{"version":3,"sources":["Inputbox.js","App.js","reportWebVitals.js","index.js"],"names":["Inputbox","searchChange","date","days","hours","mins","secs","className","type","placeholder","onChange","onClick","App","onSearchChange","event","setState","input","target","value","onSubmit","state","update","setInterval","calculateTimer","required","Date","parse","clearInterval","Math","floor","minutes","seconds","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOA4BeA,EA1BE,YAAwD,IAAtDA,EAAqD,EAArDA,SAASC,EAA4C,EAA5CA,aAAaC,EAA+B,EAA/BA,KAAKC,EAA0B,EAA1BA,KAAKC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,KAC1D,OACI,sBAAKC,UAAU,UAAf,UACA,iDAAoBL,KACpB,+BAAKC,EAAL,QAAgBC,EAAhB,SAA6BC,EAA7B,OAAuCC,EAAvC,SACA,gCACA,uBAAOE,KAAK,OAAOC,YAAY,aAAaC,SAAUT,IAAe,uBACrE,wBAAQO,KAAK,SAASG,QAASX,EAA/B,0BCiEOY,E,kDAnET,aAAc,IAAD,8BACX,gBAYFC,eAAe,SAACC,GACd,EAAKC,SAAS,CAACC,MAAMF,EAAMG,OAAOC,SAdvB,EAiBbC,SAAS,WACP,EAAKjB,KAAK,EAAKkB,MAAMJ,MACrB,EAAKD,SAAS,CAACM,OAAO,EAAKnB,OAE3BoB,YAAY,EAAKC,eAAe,MArBrB,EAwBbA,eAAiB,WACf,IAGIC,EAHQC,KAAKC,MAAM,EAAKxB,MACfuB,KAAKC,MAAM,IAAID,MAI5B,GAAGD,EAAS,EACJG,cAAcL,YAAY,EAAKC,eAAgB,MAC/C,EAAKR,SAAS,CAACZ,KAAK,OACpB,EAAKY,SAAS,CAACX,MAAM,OACrB,EAAKW,SAAS,CAACV,KAAK,OACpB,EAAKU,SAAS,CAACT,KAAK,WAElB,CACI,IAAIH,EAAOyB,KAAKC,MAAML,EAAQ,OAC1BpB,EAAQwB,KAAKC,MAAOL,EAAQ,MAAT,MACnBM,EAAUF,KAAKC,MAAOL,EAAQ,KAAT,KACrBO,EAAUH,KAAKC,MAAOL,EAAQ,IAAkB,KAEpD,EAAKT,SAAS,CAACZ,KAAKA,IACpB,EAAKY,SAAS,CAACX,MAAMA,IACrB,EAAKW,SAAS,CAACV,KAAKyB,IACpB,EAAKf,SAAS,CAACT,KAAKyB,MA3ClC,EAAKX,MAAM,CACTJ,MAAM,GACNK,OAAO,GACPlB,KAAK,GACLC,MAAM,GACNC,KAAK,GACLC,KAAK,IATI,E,0CAoDjB,WACE,OACE,8BACE,cAAC,EAAD,CAAWL,aAAc+B,KAAKnB,eAAgBb,SAAUgC,KAAKb,SAAUjB,KAAM8B,KAAKZ,MAAMC,OACxFlB,KAAM6B,KAAKZ,MAAMjB,KAAMC,MAAO4B,KAAKZ,MAAMhB,MAAOC,KAAM2B,KAAKZ,MAAMf,KAAMC,KAAM0B,KAAKZ,MAAMd,a,GA3D9E2B,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a1455fee.chunk.js","sourcesContent":["import  './Inputbox.css';\r\n\r\nconst Inputbox = ({Inputbox,searchChange,date,days,hours,mins,secs}) => {\r\n    return(\r\n        <div className=\"display\">\r\n        <h3> Times ends on {date}</h3>\r\n        <h1>{days} Day {hours} Hour {mins}Min {secs}Sec</h1>\r\n        <div>\r\n        <input type=\"Date\" placeholder=\"01/01/2021\" onChange={searchChange}/><br/>\r\n        <button type=\"submit\" onClick={Inputbox}>Start</button>\r\n        </div>\r\n       \r\n   </div>\r\n    )\r\n   \r\n    \r\n    \r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Inputbox;\r\n\r\n","import Inputbox from './Inputbox';\nimport React from 'react';\n\n\nclass App extends React.Component{\n\n  date;\n      constructor(){\n        super();\n\n        this.state={\n          input:'',\n          update:'',\n          days:'',\n          hours:'',\n          mins:'',\n          secs:''\n        }\n      }\n        \n      onSearchChange=(event)=>{\n        this.setState({input:event.target.value})\n      }\n        \n      onSubmit=()=>{\n        this.date=this.state.input;\n        this.setState({update:this.date})\n        //console.log(this.date)\n        setInterval(this.calculateTimer,1000);\n      }\n\n      calculateTimer = () =>{\n        let given = Date.parse(this.date);\n        let current= Date.parse(new Date());\n       \n        let required=given-current;\n        //console.log(required);\n        if(required<0){\n                clearInterval(setInterval(this.calculateTimer, 1000));\n                this.setState({days:'00'});\n                this.setState({hours:'00'});\n                this.setState({mins:'00'});\n                this.setState({secs:'00'});\n              }\n              else{\n                      let days = Math.floor(required / (1000 * 60 * 60 * 24));\n                      let hours = Math.floor((required % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n                      let minutes = Math.floor((required % (1000 * 60 * 60)) / (1000 * 60));\n                      let seconds = Math.floor((required % (1000 * 60)) / 1000);\n                      \n                      this.setState({days:days});\n                      this.setState({hours:hours});\n                      this.setState({mins:minutes});\n                      this.setState({secs:seconds});\n                    }\n\n\n      }\n\n  render(){\n    return(\n      <div>\n        <Inputbox  searchChange={this.onSearchChange} Inputbox={this.onSubmit} date={this.state.update}\n        days={this.state.days} hours={this.state.hours} mins={this.state.mins} secs={this.state.secs}/>\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\nexport default App;\n\n\n\n\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}